from pymoc.modules import Psi_Thermwind, Psi_SO, Column
from pymoc.plotting import Interpolate_channel, Interpolate_twocol
import numpy as np
from matplotlib import pyplot as plt

diag_file=None

# boundary conditions:
bs=0.02;
# the minimum surface buoyancy in the GCM in the North Atlantic is 3.5890e-04 (or 0.1795C)
bs_NA=0.00036; bAABW=-0.0011;  bs_NP = 0.02; bbot=min(bAABW,bs_NA,bs_NP) 
#add another buoyancy condition for the fourth column



# S.O. surface boundary conditions and grid: 
y=np.asarray(np.linspace(0,3.e6, 51))
tau=0.16 #surface wind stress
offset=0.0345*(1-np.cos(np.pi*(5.55e5-1.e5)/8e6));
bs_SO=(0.0345*(1-np.cos(np.pi*(y-1.e5)/8e6))*(y>5.55e5)
      +(bAABW-offset)/5.55e5*np.maximum(0,5.55e5-y)+offset*(y<5.55e5));

# time-stepping parameters:
dt=86400.*30.                               # time-step for vert. adv. diff. calc.
MOC_up_iters=int(np.floor(2.*360*86400/dt)) # multiplier for MOC time-step (MOC is updated every MOC_up_iters time steps)
plot_iters= int(np.ceil(500*360*86400/dt))  # plotting frequency (in iterations)
total_iters=int(np.ceil(4000*360*86400/dt))# total number of timesteps

# Effective diffusivity profile
def kappaeff(z): # effective diffusivity profile with tapering in BBL
        return 1.0*( 1e-4*(1.1-np.tanh(np.maximum(z+2000.,0)/1000. + np.minimum(z+2000.,0)/1300.))
                *(1.-np.maximum(-4000.-z+600.,0.)/600.)**2 ) 

A_Atl=7e13 
A_NA=5.5e12
A_Pac = 1.7e14 #realistic areas
A_NP = 1.34e13



Lx = 1.3e+07  #(length of the channel) 
Latl=6./21.*Lx;
Lpac=15./21.*Lx; 
K = 1800. # eddy diffusivity coefficient
N2min=2e-7 #Minimum stratification for convective adjustment. 
# create vertical grid:
z=np.asarray(np.linspace(-4000, 0, 80)) 



# create initial guess for buoyancy profile in the Atl and Pac
def b_Atl(z): return bs*np.exp(z/300.)+z/z[0]*bbot
#def b_Atl(z): return 0.3*bs+z/z[0]*(bbot-0.3*bs)
def b_Pac(z): return bs*np.exp(z/300.)+z/z[0]*bbot

# create N.A. overturning model instance
AMOC = Psi_Thermwind(z=z,b1=b_Atl,b2=0.01*b_Atl(z))
# and solve for initial overturning streamfunction:
AMOC.solve()
# map North Atlantic overturning to isopycnal space:

#IMPORTANT: changed psi_iso_N to psi_iso_NA
[Psi_iso_Atl,Psi_iso_NA]=AMOC.Psibz()

#create N.P overturning model instance
PMOC = Psi_Thermwind(z=z,b1=b_Pac,b2=0.01*b_Pac(z))
# and solve for initial overturning streamfunction:
PMOC.solve()

[Psi_iso_Pac,Psi_iso_NP]=PMOC.Psibz()

# create interbasin zonal overturning model instance
ZOC = Psi_Thermwind(z=z,b1=b_Atl,b2=b_Pac, f=1e-4)
# and solve for initial overturning streamfunction:
ZOC.solve()
# map inter-basin overturning to isopycnal space:
[Psi_zonal_Atl,Psi_zonal_Pac]=ZOC.Psibz()

# create S.O. overturning model instance for Atlantic sector
SO_Atl=Psi_SO(z=z,y=y,b=b_Atl(z),bs=bs_SO,tau=tau,L=Latl,KGM=K)
SO_Atl.solve()

# create S.O. overturning model instance for Pacific sector
SO_Pac=Psi_SO(z=z,y=y,b=b_Pac(z),bs=bs_SO,tau=tau,L=Lpac,KGM=K)
SO_Pac.solve()

Atl= Column(z=z,kappa=kappaeff,b=b_Atl,bs=bs,bbot=bbot,Area=A_Atl,N2min=N2min)
# create adv-diff column model instance for northern sinking region Atlantic
NA = Column(z=z,kappa=kappaeff,b=b_Atl,bs=bs_NA,bbot=bbot,Area=A_NA,N2min=N2min)
# create adv-diff column model instance for Pac
Pac= Column(z=z,kappa=kappaeff,b=b_Pac,bs=bs,bbot=bbot,Area=A_Pac,N2min=N2min)
#create adv-diff column model instance for northern sinking region Pacific
NP = Column(z=z,kappa=kappaeff,b=b_Pac,bs=bs_NP,bbot=bbot,Area=A_NP,N2min=N2min)



fig = plt.figure(figsize=(6,9))
ax1 = fig.add_subplot(111)
ax2 = ax1.twiny()
plt.ylim((-4e3,0))
ax1.set_xlim((-20,30))
ax2.set_xlim((-0.02,0.030))

diag_file = 'twobasin_diags_bs_',str(bs_NP)

# loop to iteratively find equilibrium solution
for ii in range(0, total_iters):    # update buoyancy profile # using isopycnal overturning:
    wA_Atl=(Psi_iso_Atl+Psi_zonal_Atl-SO_Atl.Psi)*1e6 
    wNA= -Psi_iso_NA*1e6
    wA_Pac=(Psi_iso_Pac-Psi_zonal_Pac-SO_Pac.Psi)*1e6 # Area integrated velocity profile for the timestepping solution
    wNP = -Psi_iso_NP*1e6  #is psi_iso_pac positive or negative
    Atl.timestep(wA=wA_Atl,dt=dt)
    NA.timestep(wA=wNA,dt=dt,do_conv=True) 
    Pac.timestep(wA=wA_Pac,dt=dt)
    NP.timestep(wA=wNP,dt=dt,do_conv=True)
    
    if ii%MOC_up_iters==0:  # update overturning streamfunction (can be done less frequently)
        AMOC.update(b1=Atl.b,b2=NA.b)
        AMOC.solve()
        [Psi_iso_Atl, Psi_iso_NA]=AMOC.Psibz()
        PMOC.update(b1=Pac.b,b2=NP.b)
        PMOC.solve()
        [Psi_iso_Pac, Psi_iso_NP]=PMOC.Psibz()
        ZOC.update(b1=Atl.b,b2=Pac.b)
        ZOC.solve()
        [Psi_zonal_Atl,Psi_zonal_Pac]=ZOC.Psibz()
        SO_Atl.update(b=Atl.b)
        SO_Atl.solve()
        SO_Pac.update(b=Pac.b)
        SO_Pac.solve() #modify for north pacific too
    
    if ii%plot_iters==0:  # Plot current state:
        ax1.plot(AMOC.Psi, AMOC.z,'--r', label="AMOC", linewidth=0.5)
        ax1.plot(PMOC.Psi, PMOC.z,'--m',label="PMOC", linewidth=0.5) #added the PMOC
        ax1.plot(ZOC.Psi, ZOC.z, 'tab:orange',label="Zonal", linewidth=0.5)
        ax1.plot(SO_Atl.Psi-ZOC.Psi, SO_Atl.z, '--b', label="South Atl & Zonal", linewidth=0.5)
        ax1.plot(SO_Pac.Psi+ZOC.Psi, SO_Pac.z, '--g', label="South Pac & Zonal", linewidth=0.5)
        ax1.plot(SO_Atl.Psi+SO_Pac.Psi, z, '--c',label="South Atl & Pac", linewidth=0.5)
        ax1.legend(loc='center right')
        ax2.plot(Atl.b, Atl.z, '-b', label="Atl", linewidth=0.5)
        ax2.plot(Pac.b, Pac.z, '-g', label="Pac", linewidth=0.5)
        ax2.plot(NA.b, NA.z, 'maroon', label="North Atl",linewidth=0.5) 
        ax2.plot(NP.b, NP.z, '-m', label="North Pac", linewidth=0.5) #added the NP
        ax2.legend(loc='lower right')
        plt.pause(0.01)
        print("t=",round(ii*dt/86400/360),"years")

ax1.plot(AMOC.Psi, AMOC.z,'--r', label="AMOC", linewidth=1.5)
ax1.plot(PMOC.Psi, PMOC.z,'--m', label="PMOC", linewidth=0.5) #added the PMOC
ax1.plot(ZOC.Psi, ZOC.z, 'tab:orange', label="Zonal", linewidth=1.5)
ax1.plot(SO_Atl.Psi-ZOC.Psi, SO_Atl.z, '--b', label="South Atl & Zonal", linewidth=1.5)
ax1.plot(SO_Pac.Psi+ZOC.Psi, SO_Pac.z, '--g', label="South Pac & Zonal", linewidth=1.5)
ax1.plot(SO_Atl.Psi+SO_Pac.Psi, z, '--c', label="South Atl & Pac", linewidth=1.5)
ax1.legend()

ax2.plot(Atl.b, Atl.z, '-b', label="Atl", linewidth=1.5)
ax2.plot(Pac.b, Pac.z, '-g', label="Pac", linewidth=1.5)
ax2.plot(NA.b, NA.z, '-r', label="North Atl", linewidth=0.5) 
ax2.plot(NP.b, NP.z, 'm', label="North Pac", linewidth=0.5) #added the NP
ax2.legend()

np.savez(diag_file, b_Atl=Atl.b, b_Pac=Pac.b, b_NA = NA.b, b_NP = NP.b,
            Psi_SO_Atl=SO_Atl.Psi, Psi_SO_Pac=SO_Pac.Psi,
            Psi_ZOC=ZOC.Psi, Psib_ZOC=ZOC.Psib(), bgrid_ZOC=ZOC.bgrid,
            Psi_AMOC=AMOC.Psi, Psib_AMOC=AMOC.Psib(), bgrid_AMOC=AMOC.bgrid, Psi_PMOC = PMOC.Psi, Psib_PMOC = PMOC.Psib(), bgrid_PMOC = PMOC.bgrid)

diag_load = np.load('twobasin_diags_bs_0.02.npz') #this changes depending on the bs_NP value. In this case, bs_NP= 0.02
b_NA = diag_load['b_NA']
b_NP = diag_load['b_NP']
b_Atl = diag_load['b_Atl']
b_Pac = diag_load['b_Pac']
Psi_SO_Atl = diag_load['Psi_SO_Atl']
Psi_SO_Pac = diag_load['Psi_SO_Pac']
Psi_ZOC = diag_load['Psi_ZOC']
Psib_ZOC = diag_load['Psib_ZOC']
bgrid_ZOC = diag_load['bgrid_ZOC']
Psi_AMOC = diag_load['Psi_AMOC']
Psib_AMOC = diag_load['Psib_AMOC']
bgrid_AMOC = diag_load['bgrid_AMOC']
Psi_PMOC = diag_load['Psi_PMOC']
Psib_PMOC = diag_load['Psib_PMOC']
bgrid_PMOC = diag_load['bgrid_PMOC']

blevs=np.array([-0.004,-0.002,0.0,0.004,0.01,0.018])
plevs=np.arange(-21.,24.,2.0)
nba = 500;
nbp = 500;
b_basin=(A_Atl*Atl.b+A_Pac*Pac.b)/(A_Atl+A_Pac);



# Compute total SO residual overturning by first interpolating circulation 
# in both sectors to mean buoyancy profile values and then summing (at conbnstant b).
PsiSO=(np.interp(b_basin,Atl.b,SO_Atl.Psi)
      +np.interp(b_basin,Pac.b,SO_Pac.Psi));
AMOC_bbasin=np.interp(b_basin,AMOC.bgrid,AMOC.Psib(nb=nba));

PMOC_bbasin=np.interp(b_basin,PMOC.bgrid,PMOC.Psib(nb=nbp));
# this is to Plot adiabatic overturning only:
PsiSO_bgrid=(np.interp(AMOC.bgrid,Atl.b,SO_Atl.Psi)
            +np.interp(PMOC.bgrid,Pac.b,SO_Pac.Psi)); #does this change?

l=y[-1];


bs=1.*bs_SO;bnp=1.*b_basin;
bs[-1]=1.*bnp[-1];

bs=1.*bs_SO;bna=1.*b_basin;
bs[-1]=1.*bna[-1];





# first interpolate buoyancy in channel along constant-slope isopycnals: 
bint_na=Interpolate_channel(y=y,z=z,bs=bs,bn=bna) #assumed this had to be replicated because there needs to be bna and bnp
bsouth_na=bint_na.gridit()

bint_np=Interpolate_channel(y=y,z=z,bs=bs,bn=bnp)
bsouth_np=bint_np.gridit()

# buoyancy in the basin is all the same:
lbasin=11000.
ltrans=1500.
lnorth=400.
lchannel=l/1e3
ybasin=np.linspace(0,lbasin,60)+lchannel;
bbasin=np.tile(b_basin,(len(ybasin),1))
bAtl=np.tile(Atl.b,(len(ybasin),1))
bPac=np.tile(Pac.b,(len(ybasin),1))
# interpolate buoyancy in northern ransition region:
ytrans=np.linspace(ltrans/20.,ltrans,20)+lchannel+lbasin;

bna=b_NA.copy();
bnp=b_NP.copy();


bnp[0]=b_basin[0];
bna[0]=b_basin[0];

# Notice that the interpolation procedure assumes that the bottom
#buoyancies in both colums match - which may not be exactly the case depending
# on when in the time-step data is saved 


bint_na=Interpolate_twocol(y=ytrans*1000.-ytrans[0]*1000.,z=z,bs=Atl.b,bn=bna)
btrans_na=bint_na.gridit()

bint_np=Interpolate_twocol(y=ytrans*1000.-ytrans[0]*1000.,z=z,bs=Pac.b,bn=bnp)
btrans_np=bint_np.gridit()



# finally set buyancy in northern deep water formation region:
ynorth=np.linspace(lnorth/20.,lnorth,20)+lchannel+lbasin+ltrans;
bnorth_na=np.tile(bna,(len(ynorth),1))
bnorth_np=np.tile(bnp,(len(ynorth),1))
# now stick it all together:
ynew=np.concatenate((y/1e3,ybasin,ytrans,ynorth))



bnew_na=np.concatenate((bsouth_na,bbasin,btrans_na,bnorth_na))
bnew_np=np.concatenate((bsouth_np,bbasin,btrans_np,bnorth_np))

bnew_Atl=np.concatenate((bsouth_na,bAtl,btrans_na,bnorth_na))
bnew_Pac=np.concatenate((bsouth_np,bPac,btrans_np,bnorth_np))



# Compute z-coordinate and residual overturning streamfunction at all latitudes:
psiarray_b_na=np.zeros((len(ynew),len(z))) # overturning in b-coordinates
psiarray_b_np=np.zeros((len(ynew),len(z))) 
psiarray_b=np.zeros((len(ynew),len(z)))

psiarray_b_Atl=np.zeros((len(ynew),len(z))) # overturning in b-coordinates
psiarray_b_Pac=np.zeros((len(ynew),len(z))) # overturning in b-coordinates

psiarray_z=np.zeros((len(ynew),len(z)))
psiarray_z_na=np.zeros((len(ynew),len(z)))
psiarray_z_np=np.zeros((len(ynew),len(z)))

psiarray_z_Atl=np.zeros((len(ynew),len(z)))  # z-space, "eulerian" overturning
psiarray_z_Pac=np.zeros((len(ynew),len(z)))  # z-space, "eulerian" overturning


for iy in range(1,len(y)):
    # in the channel, interpolate PsiSO onto local isopycnal depth:
    psiarray_z_na[iy,:]=np.interp(bnew_na[iy,:],b_basin,SO_Atl.Psi+SO_Pac.Psi)
    psiarray_z_np[iy,:]=np.interp(bnew_np[iy,:],b_basin,SO_Atl.Psi+SO_Pac.Psi)
    
    psiarray_z_Atl[iy,:]=psiarray_z_na[iy,:]
    psiarray_z_Pac[iy,:]=psiarray_z_np[iy,:]
    psiarray_z[iy,:]=np.interp((bnew_na)[iy,:],b_basin,SO_Atl.Psi+SO_Pac.Psi) #not sure if this is bnew_na or bnew_na + bnew_np
    
    psiarray_b[iy,b_basin<bs_SO[iy]]=PsiSO[b_basin<bs_SO[iy]] 
    psiarray_b_Atl[iy,:]=psiarray_b[iy,:];   
    psiarray_b_Pac[iy,:]=psiarray_b[iy,:];    
     
    
for iy in range(len(y),len(y)+len(ybasin)):
    # in the basin, linearly interpolate between Psi_SO and Psi_AMOC:

    psiarray_z[iy,:]=((ynew[iy]-lchannel)*(AMOC.Psi)+(lchannel+lbasin-ynew[iy])*(SO_Atl.Psi+SO_Pac.Psi))/lbasin 
    
    psiarray_z_Atl[iy,:]=((ynew[iy]-lchannel)*AMOC.Psi+(lchannel+lbasin-ynew[iy])*(SO_Atl.Psi-ZOC.Psi))/lbasin  
    psiarray_z_Pac[iy,:]= ((ynew[iy]-lchannel)*PMOC.Psi+(lchannel+lbasin-ynew[iy])*(SO_Pac.Psi+ZOC.Psi))/lbasin  #changed the sign
    
    psiarray_b[iy,:]=((ynew[iy]-lchannel)*(AMOC_bbasin + PMOC_bbasin)
                      +(lchannel+lbasin-ynew[iy])*PsiSO)/lbasin    
    
    psiarray_b_Atl[iy,:]=((ynew[iy]-lchannel)*AMOC_bbasin+
                    (lchannel+lbasin-ynew[iy])*(np.interp(b_basin,Atl.b,SO_Atl.Psi)
                      -np.interp(b_basin,ZOC.bgrid,ZOC.Psib())))/lbasin                                                                                      
    psiarray_b_Pac[iy,:]= ((ynew[iy]-lchannel)*PMOC_bbasin+
                    (lchannel+lbasin-ynew[iy])*(np.interp(b_basin,Pac.b,SO_Pac.Psi)
                      +np.interp(b_basin,ZOC.bgrid,ZOC.Psib())))/lbasin   
    
for iy in range(len(y)+len(ybasin),len(y)+len(ybasin)+len(ytrans)):
    # in the northern transition region keep psi_z constant 
    # and psi_b constant on non-outcropped isopycnals (but zero on outcropped isopycnals)
    psiarray_z[iy,:]= AMOC.Psi # + PMOC.Psi
    psiarray_z_Atl[iy,:]=AMOC.Psi      
    psiarray_z_Pac[iy,:]=PMOC.Psi   
   
    psiarray_b_na[iy,b_basin<bnew_na[iy,-1]]=AMOC_bbasin[b_basin<bnew_na[iy,-1]]   
    psiarray_b_np[iy,b_basin<bnew_np[iy,-1]]=PMOC_bbasin[b_basin<bnew_np[iy,-1]]
    psiarray_b[iy,b_basin<(bnew_na+bnew_np)[iy,-1]]=(AMOC_bbasin+PMOC_bbasin)[b_basin<(bnew_na+bnew_np)[iy,-1]]  
   
    psiarray_b_Atl[iy,b_basin<bnew_na[iy,-1]]=psiarray_b_na[iy,b_basin<bnew_na[iy,-1]]
    psiarray_b_Pac[iy,b_basin<bnew_np[iy,-1]]=psiarray_b_np[iy,b_basin<bnew_np[iy,-1]]
   
    
for iy in range(len(y)+len(ybasin)+len(ytrans),len(ynew)):
    # in the northern sinking region, all psi decrease linearly to zero:
  
    psiarray_z[iy,:]=((lchannel+lbasin+ltrans+lnorth-ynew[iy])*(AMOC.Psi))/lnorth
    psiarray_z_Atl[iy,:]=((lchannel+lbasin+ltrans+lnorth-ynew[iy])*AMOC.Psi)/lnorth      
    psiarray_z_Pac[iy,:]= ((lchannel+lbasin+ltrans+lnorth-ynew[iy])*PMOC.Psi)/lnorth
    
    
    
    psiarray_b_na[iy,b_basin<bnew_na[iy,-1]]=((lchannel+lbasin+ltrans+lnorth-ynew[iy])*AMOC_bbasin[b_basin<bnew_na[iy,-1]])/lnorth  
    psiarray_b_np[iy,b_basin<bnew_np[iy,-1]]=((lchannel+lbasin+ltrans+lnorth-ynew[iy])*PMOC_bbasin[b_basin<bnew_np[iy,-1]])/lnorth  
    psiarray_b[iy,b_basin<(bnew_na+bnew_np)[iy,-1]]=((lchannel+lbasin+ltrans+lnorth-ynew[iy])
        *(AMOC_bbasin+PMOC_bbasin)[b_basin<(bnew_na+bnew_np)[iy,-1]])/lnorth
    


    psiarray_b_Atl[iy,b_basin<bnew_na[iy,-1]]=psiarray_b_na[iy,b_basin<bnew_na[iy,-1]]
    psiarray_b_Pac[iy,b_basin<bnew_np[iy,-1]]=psiarray_b_np[iy,b_basin<bnew_np[iy,-1]]

#z coordinate overturning

fig = plt.figure(figsize=(10.6,6.8))
ax1 =fig.add_axes([0.1,.57,.33,.36])
ax2 = ax1.twiny()
plt.ylim((-4e3,0))
ax1.set_ylabel('Depth [m]', fontsize=13)
ax1.set_xlim((-20,30))
ax2.set_xlim((-0.02,0.030))
ax1.set_xlabel('$\Psi$ [SV]', fontsize=13)
ax2.set_xlabel('$b_B$ [m s$^{-2}$]', fontsize=13)
ax1.plot(AMOC.Psi, AMOC.z,'--r', label = "AMOC", linewidth=1.5)
ax1.plot(PMOC.Psi, PMOC.z,'--m', label = "PMOC", linewidth=1.5) #match colors to earlier plot
ax1.plot(ZOC.Psi, ZOC.z, 'tab:orange', label = "Zonal", linewidth=1.5)
ax1.plot(SO_Atl.Psi-ZOC.Psi, SO_Atl.z, '--b', label = "South Atl & Zonal", linewidth=1.5)
ax1.plot(SO_Pac.Psi+ZOC.Psi, SO_Pac.z, '--g', label = "South Pac & Zonal", linewidth=1.5)
ax1.plot(SO_Atl.Psi+SO_Pac.Psi, z, '--c', label = "South Atl & Pac", linewidth=1.5)
ax2.plot(Atl.b, Atl.z, '-b', label = "Atl", linewidth=1.5)
ax2.plot(Pac.b, Pac.z, '-g', label = "Pac", linewidth=1.5)
ax2.plot(NA.b, NA.z, 'maroon', label = "North Atl",linewidth=1.5) 
ax2.plot(NP.b, NP.z, '-m',label = "North Pac",linewidth=1.5)   
h1, l1 = ax1.get_legend_handles_labels()
h2, l2 = ax2.get_legend_handles_labels()
ax1.plot(0.*z, z,linewidth=0.5,color='k',linestyle=':',label ="z coord")
#ax1.legend(h1+h2, l1+l2, loc='center right', frameon=False)


ax1 = fig.add_subplot(222)
CS=ax1.contour(ynew,z,bnew_na.transpose()/2e-3,levels=blevs/2e-3,colors='k',linewidths=1.0,linestyles='solid')
ax1.clabel(CS,fontsize=10,fmt='%1.0f')
ax1.contour(ynew,z,psiarray_z.transpose(),levels=plevs,colors='k',linewidths=0.5)
CS=ax1.contourf(ynew,z,psiarray_z.transpose(),levels=plevs,cmap=plt.cm.bwr, vmin=-20, vmax=20)
ax1.set_xlim([0,ynew[-1]])
ax1.set_xlabel('y [km]',fontsize=12)
ax1.set_ylabel('Depth [m]',fontsize=12)
ax1.set_title('Global',fontsize=12)
       
ax1 = fig.add_subplot(223)
CS=ax1.contour(ynew,z,bnew_Pac.transpose()/2e-3,levels=blevs/2e-3,colors='k',linewidths=1.0,linestyles='solid')
ax1.clabel(CS,fontsize=10,fmt='%1.0f')
ax1.contour(ynew,z,psiarray_z_Pac.transpose(),levels=plevs,colors='k',linewidths=0.5)
CS=ax1.contourf(ynew,z,psiarray_z_Pac.transpose(),levels=plevs,cmap=plt.cm.bwr, vmin=-20, vmax=20)
ax1.set_xlim([0,ynew[-1]])
ax1.set_xlabel('y [km]',fontsize=12)
ax1.set_title('Pacific',fontsize=12)
plt.gca().invert_xaxis()

ax1 = fig.add_subplot(224)
CS=ax1.contour(ynew,z,bnew_Atl.transpose()/2e-3,levels=blevs/2e-3,colors='k',linewidths=1.0,linestyles='solid')
ax1.clabel(CS,fontsize=10,fmt='%1.0f')
ax1.contour(ynew,z,psiarray_z_Atl.transpose(),levels=plevs,colors='k',linewidths=0.5)
CS=ax1.contourf(ynew,z,psiarray_z_Atl.transpose(),levels=plevs,cmap=plt.cm.bwr, vmin=-20, vmax=20)
ax1.set_xlim([0,ynew[-1]])
ax1.set_xlabel('y [km]',fontsize=12)
ax1.set_ylabel('Depth [m]',fontsize=12)
ax1.set_title('Atlantic',fontsize=12)

cbar_ax = fig.add_axes([0.94, 0.15, 0.015, 0.7])
fig.tight_layout()   
fig.subplots_adjust(right=0.92)
fig.colorbar(CS, cax=cbar_ax,ticks=np.arange(-20,21,5), orientation='vertical')

#isopycnal overturning

fig = plt.figure(figsize=(10.8,6.8))
ax1 =fig.add_axes([0.1,.57,.33,.36])
ax2 = ax1.twiny()
plt.ylim((-4e3,0))
ax1.set_ylabel('b [m s$^{-2}$]', fontsize=13)
ax1.set_xlim((-20,30))
ax2.set_xlim((-0.02,0.030))
ax1.set_xlabel('$\Psi$ [SV]', fontsize=13)
ax2.set_xlabel('$b_B$ [m s$^{-2}$]', fontsize=13)
ax1.plot(AMOC_bbasin, z,'--r', linewidth=1.5)
ax1.plot(PMOC_bbasin, z,'--m', linewidth=1.5)
ax1.plot(np.interp(b_basin,ZOC.bgrid,ZOC.Psib()), z, 'tab:orange', linewidth=1.5)
ax1.plot(np.interp(b_basin,Atl.b,SO_Atl.Psi)
        -np.interp(b_basin,ZOC.bgrid,ZOC.Psib()), z, '--b', linewidth=1.5)
ax1.plot(np.interp(b_basin,Pac.b,SO_Pac.Psi)
          +np.interp(b_basin,ZOC.bgrid,ZOC.Psib()), z, '--g', linewidth=1.5)
ax1.plot(PsiSO, z, '--c', linewidth=1.5)
ax2.plot(Atl.b, Atl.z, '-b', linewidth=1.5)
ax2.plot(Pac.b, Pac.z, '-g', linewidth=1.5)
ax2.plot(NA.b, NA.z, 'maroon', linewidth=1.5)    
ax2.plot(NP.b, NP.z, '-m', linewidth=1.5)  
h1, l1 = ax1.get_legend_handles_labels()
h2, l2 = ax2.get_legend_handles_labels()
ax1.legend(h1+h2, l1+l2, loc=4, frameon=False)
ax1.plot(0.*b_basin, b_basin,linewidth=0.5,color='k',linestyle=':')
ax1.set_yticks(np.interp([0.02, 0.005,0.002,0.001,0.0005, 0.,-0.0005, -0.001 ],b_basin,z))
ax1.set_yticklabels([0.02, 0.005,0.002, 0.001,0.0005, 0.,-0.0005, -0.001 ])

ax1 = fig.add_subplot(222)
ax1.contour(ynew,z,psiarray_b.transpose(),levels=plevs,colors='k',linewidths=0.5)
CS=ax1.contourf(ynew,z,psiarray_b.transpose(),levels=plevs,cmap=plt.cm.bwr, vmin=-20, vmax=20)
ax1.set_xlim([0,ynew[-1]])
ax1.set_xlabel('y [km]',fontsize=12)
ax1.set_ylabel('b [m s$^{-2}$]',fontsize=12)
ax1.set_title('Global',fontsize=12)
ax1.set_yticks(np.interp([0.02, 0.005,0.002,0.001,0.0005, 0.,-0.0005, -0.001 ],b_basin,z))
ax1.set_yticklabels([0.02, 0.005,0.002, 0.001,0.0005, 0.,-0.0005, -0.001 ])
       
ax1 = fig.add_subplot(223)
ax1.contour(ynew,z,psiarray_b_Pac.transpose(),levels=plevs,colors='k',linewidths=0.5)
CS=ax1.contourf(ynew,z,psiarray_b_Pac.transpose(),levels=plevs,cmap=plt.cm.bwr, vmin=-20, vmax=20)
ax1.plot(np.array([y[-1]/1000.,y[-1]/1000.]),np.array([-4000.,0.]),color='k')
ax1.set_xlim([0,ynew[-1]])
ax1.set_xlabel('y [km]',fontsize=12)
ax1.set_ylabel('b [m s$^{-2}$]',fontsize=12)
ax1.set_title('Pacific',fontsize=12)
ax1.set_yticks(np.interp([0.02, 0.005,0.002,0.001,0.0005, 0.,-0.0005, -0.001 ],b_basin,z))
ax1.set_yticklabels([0.02, 0.005,0.002, 0.001,0.0005, 0.,-0.0005, -0.001 ])
plt.gca().invert_xaxis()

ax1 = fig.add_subplot(224)
ax1.contour(ynew,z,psiarray_b_Atl.transpose(),levels=plevs,colors='k',linewidths=0.5)
CS=ax1.contourf(ynew,z,psiarray_b_Atl.transpose(),levels=plevs,cmap=plt.cm.bwr, vmin=-20, vmax=20)
ax1.plot(np.array([y[-1]/1000.,y[-1]/1000.]),np.array([-4000.,0.]),color='k')
ax1.set_xlim([0,ynew[-1]])
ax1.set_xlabel('y [km]',fontsize=12)
ax1.set_ylabel('b [m s$^{-2}$]',fontsize=12)
ax1.set_title('Atlantic',fontsize=12)
ax1.set_yticks(np.interp([0.02, 0.005,0.002,0.001,0.0005, 0.,-0.0005, -0.001 ],b_basin,z))
ax1.set_yticklabels([0.02, 0.005,0.002, 0.001,0.0005, 0.,-0.0005, -0.001 ])

cbar_ax = fig.add_axes([0.94, 0.15, 0.015, 0.7])
fig.tight_layout()   
fig.subplots_adjust(right=0.92)
fig.colorbar(CS, cax=cbar_ax,ticks=np.arange(-20,21,5), orientation='vertical')




