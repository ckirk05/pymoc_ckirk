from MITgcmutils import llc
import numpy as np
import matplotlib.pyplot as plt

from MITgcmutils import mds
from MITgcmutils import jmd95
from MITgcmutils import mdjwf
from MITgcmutils import cs
from scipy import integrate

DXG = mds.rdmds('DXG')
XC = mds.rdmds('XC')
YC = mds.rdmds('YC')
XG = mds.rdmds('XG')
YG = mds.rdmds('YG')
zf = mds.rdmds('RF')
zc = mds.rdmds('RC')
Diag_Final_deep = mds.rdmds('deepDiag4.0020805000')
V_EU_deep = Diag_Final_deep[1,:,:,:]
Psiy_GM_deep = Diag_Final_deep[7,:,:,:]
THETA_DEEP = Diag_Final_deep[3,:,:,:]


x = XC[0,:];
y = YG[:,0];
z = zf[0:29,0,0];

Y,X,Z= np.meshgrid(YG[:,0],XG[0,:],zc[:,0,0]);
[nx,ny,nz]=X.shape;

Psi_EM_deep= np.zeros([ny,nx,nz]);

psiGM_deep = np.zeros([ny,nz]);

psiEM_deep = np.zeros([ny,nz]);

thetay_deep = np.zeros([ny,nz]);


V_tot_deep=V_EU_deep;
V_tot_deep[-1,:,0:60]=V_tot_deep[-1,:,0:60]-Psiy_GM_deep[-1,:,0:60]/(zf[-2,0,0]-zf[-1,0,0]);


for kk in range(0,nz-2): 
    V_tot_deep[kk-1,:,0:60]=V_tot_deep[kk-1,:,0:60]+(Psiy_GM_deep[kk,:,0:60]-Psiy_GM_deep[kk-1,:,0:60])/(zf[kk-1,0,0,]-zf[kk,0,0]);
    
for kk in range(nz-1,0,-1): 
    Psi_EM_deep[:,0:60,kk-1] = Psi_EM_deep[:,0:60,kk] +V_EU_deep[kk-1,:,0:60]*(zf[kk,0,0]-zf[kk-1,0,0]);
    
for k in range(0,nz-1):
    for j in range(0,ny-1):
        thetay_deep[j,k] = np.nanmean(np.squeeze(THETA_DEEP[k,j,0:60]));
        psiGM_deep[j,k]=np.sum(Psiy_GM_deep[k,j,0:60]*DXG[j,0:60]); 
        psiEM_deep[j,k]=np.sum(Psi_EM_deep[j,0:60,k]*DXG[j,0:60]);
      
psi_res_deep=psiEM_deep+psiGM_deep;

plt.contourf(y[32:140],z,psi_res_deep.transpose()[:,32:140],levels=np.linspace(-1.75e7,1.75e7,50)) #colorbar range for wide basin
plt.colorbar()
